---
- name: Install Docker Engine on Ubuntu Server
  hosts: all
  become: true
  gather_facts: true
  vars:
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    
    # Optional: Specify Docker version (leave empty for latest)
    docker_version: ""
    
    # Users to add to docker group (optional)
    docker_users: []

    # Architecture mapping for Docker repository
    docker_arch_map:
      x86_64: "amd64"
      aarch64: "arm64"
      armv7l: "armhf"
      s390x: "s390x"
      ppc64le: "ppc64el"
    
    # GPG key and repository configuration
    docker_gpg_key_url: "https://download.docker.com/linux/ubuntu/gpg"
    docker_gpg_key_path: "/etc/apt/keyrings/docker.asc"
    docker_apt_repository: "deb [arch={{ docker_arch_map[ansible_architecture] | default(ansible_architecture) }} signed-by={{ docker_gpg_key_path }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

  pre_tasks:
    - name: Verify OS requirements
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_version is version('22.04', '>=')
          - ansible_architecture in ['x86_64', 'aarch64', 'armv7l', 's390x', 'ppc64le']
        fail_msg: "This playbook requires Ubuntu 22.04+ on supported architecture"
        success_msg: "OS requirements verified: {{ ansible_distribution }} {{ ansible_distribution_version }} on {{ ansible_architecture }}"

  tasks:
    - name: Process docker users from string input
      ansible.builtin.set_fact:
        docker_users: "{{ docker_users_string.split(',') | map('trim') | select('string') | list }}"
      when: 
        - docker_users_string is defined
        - docker_users_string != ""

    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      tags: [setup]

    - name: Remove conflicting packages
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-doc
          - docker-compose
          - docker-compose-v2
          - podman-docker
          - containerd
          - runc
        state: absent
        purge: true
      tags: [cleanup]

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - apt-transport-https
        state: present
        update_cache: true
      tags: [setup]

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        owner: root
        group: root
      tags: [setup]

    - name: Add Docker's official GPG key
      ansible.builtin.get_url:
        url: "{{ docker_gpg_key_url }}"
        dest: "{{ docker_gpg_key_path }}"
        mode: '0644'
        owner: root
        group: root
        force: true
      tags: [setup]

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_apt_repository }}"
        filename: docker
        state: present
        update_cache: true
      tags: [setup]

    - name: Install Docker packages (latest version)
      ansible.builtin.apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: true
      when: docker_version == ""
      tags: [install]

    - name: Install Docker packages (specific version)
      ansible.builtin.apt:
        name: "{{ item }}={{ docker_version }}"
        state: present
        update_cache: true
      loop: "{{ docker_packages }}"
      when: docker_version != ""
      tags: [install]

    - name: Ensure Docker service is started and enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
        daemon_reload: true
      tags: [service]

    - name: Add users to docker group
      ansible.builtin.user:
        name: "{{ item }}"
        groups: docker
        append: true
      loop: "{{ docker_users }}"
      when: docker_users | length > 0
      tags: [users]

    - name: Verify Docker installation
      ansible.builtin.command: docker --version
      register: docker_version_output
      changed_when: false
      tags: [verify]

    - name: Display Docker version
      ansible.builtin.debug:
        msg: "{{ docker_version_output.stdout }}"
      tags: [verify]

    - name: Test Docker installation with hello-world
      ansible.builtin.command: docker run --rm hello-world
      register: docker_test_output
      changed_when: false
      tags: [test]

    - name: Display test results
      ansible.builtin.debug:
        msg: "Docker test successful: {{ docker_test_output.stdout_lines[-1] }}"
      when: docker_test_output.rc == 0
      tags: [test]

  handlers:
    - name: restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted

  post_tasks:
    - name: Display post-installation information
      ansible.builtin.debug:
        msg:
          - "Docker Engine has been successfully installed on {{ inventory_hostname }}"
          - "Version: {{ docker_version_output.stdout }}"
          - "Service status: {{ ansible_facts['services']['docker']['state'] }}"
          - "To use Docker as non-root user, add users to 'docker' group"
          - "Consider running 'docker system prune' periodically to clean up unused resources"
      tags: [info]
